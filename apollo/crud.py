from logging import error
from apollo import models
from sqlalchemy.sql import text
from sqlalchemy import exc
import pandas as pd
from pandas import DataFrame
from apollo.database import ApolloSessionLocal

def query_first_user(username):
    session = ApolloSessionLocal()
    try:
        result = session.query(models.UserDB).filter_by(username=username).first()
        session.close()
        return result
    except exc.SQLAlchemyError as error:
        print("query_first_user SQL error", error)
        session.close()
        return False


def register_new_user(user):
    session = ApolloSessionLocal()

    from apollo.auth import get_password_hash
    new_user = models.UserDB(username=user.username,
                      password=get_password_hash(user.password),
                      fullname=user.fullname,
                      email=user.email,
                      disabled=0)

    try:
        session.add(new_user)
        session.commit()
        session.close()
        return True
    except exc.SQLAlchemyError as error:
        print("register_new_user SQL error", error)
        session.close()
        return False

#########################################

def update_intervention_type(request_id, value):
    session = ApolloSessionLocal()

    query = text('''UPDATE AP_SD_INTERVENTION_CLASSIFICATION
                SET AP_INTERVENTION_TYPE = (SELECT AP_SD_INTERVENTION_TYPE.id
                                            FROM AP_SD_INTERVENTION_TYPE
                                            WHERE AP_SD_INTERVENTION_TYPE.AP_TYPE_FR = "{0}")
                WHERE AP_REQUEST_ID = {1}'''.format(str(value), int(request_id)))

    try:
        session.execute(query)
        session.commit()
        session.close()
        return True

    except exc.SQLAlchemyError as commit_error:
        print("update_intervention_type SQL error", commit_error)
        session.close()
        return False


def get_requests_intervention_types(df: DataFrame):
    session = ApolloSessionLocal()

    # SQLite cannot read lists in format (12345, ) generated by the python tupple()
    if len(df.index) == 1:
        ticket_list = "({})".format(df.iloc[0]["AP_SD_REQUEST_ID"])
    else:
        ticket_list = tuple(df["AP_SD_REQUEST_ID"])

    validator_req = '''SELECT AP_SD_INTERVENTION_CLASSIFICATION.AP_REQUEST_ID
                        FROM AP_SD_INTERVENTION_CLASSIFICATION
                        WHERE AP_SD_INTERVENTION_CLASSIFICATION.AP_REQUEST_ID IN {}'''.format(ticket_list)

    # test_query = db.query(models.AP_SD_INTERVENTION_CLASSIFICATION_MODEL).filter(
    #     models.AP_SD_INTERVENTION_CLASSIFICATION_MODEL.AP_REQUEST_ID.in_(ticket_list)
    # ).all()

    # print(list(test_query))

    try:
        df_validator = pd.DataFrame(session.execute(validator_req), columns = ["AP_REQUEST_ID"])

        df_missing = df.loc[~df["AP_SD_REQUEST_ID"].isin(df_validator["AP_REQUEST_ID"])]

        if not df_missing.empty:
            df_missing["AP_INTERVENTION_TYPE"] = 1
            df_missing.rename(columns={"AP_SD_REQUEST_ID": "AP_REQUEST_ID",
                                "AP_SD_RFC_NUMBER": "AP_RFC_NUMBER",
                                "AP_INTERVENTION_TYPE": "AP_INTERVENTION_TYPE"},
                        inplace=True)

            session.bulk_insert_mappings(models.AP_SD_INTERVENTION_CLASSIFICATION_MODEL, df_missing.to_dict('records'))
            session.commit()

        result_req = '''SELECT AP_SD_INTERVENTION_CLASSIFICATION.AP_REQUEST_ID,
                                AP_SD_INTERVENTION_CLASSIFICATION.AP_INTERVENTION_TYPE,
                                AP_SD_INTERVENTION_TYPE.AP_TYPE_FR,
                                AP_SD_INTERVENTION_TYPE.AP_Description_FR
                        FROM AP_SD_INTERVENTION_CLASSIFICATION
                        LEFT JOIN AP_SD_INTERVENTION_TYPE on AP_SD_INTERVENTION_CLASSIFICATION.AP_INTERVENTION_TYPE = AP_SD_INTERVENTION_TYPE.id
                        WHERE AP_SD_INTERVENTION_CLASSIFICATION.AP_REQUEST_ID IN {}'''.format(ticket_list)

        df_result = pd.DataFrame(session.execute(result_req), columns = ["AP_REQUEST_ID", "AP_INTERVENTION_TYPE", "AP_TYPE_FR", "AP_Description_FR"])

        session.close()
        
        return df_result

    except exc.SQLAlchemyError as error:
        print("get_requests_intervention_types SQL error", error)
        return False